#!/bin/bash

NARGS=$#
OP=$1
REPO_PWD=$(pwd)
REPO_UTILS=$REPO_PWD/utils

INSTALL_MODE=("standard" "vim" "nvim" "tmux")

source $REPO_PWD/utils/print_options.sh

function print_usage(){
    print_warning "Usage:\n\t\"$0 install standard\" to install repo configuration standard"
    print_warning "\t\"$0 install [vim|nvim|tmux]\" to install only [vim|nvim|tmux] configuration"
    print_warning "\t\"$0 install submodules\" to install submodules"
    print_warning "\t\"$0 update submodules\" to update vim submodules"
    print_warning "\t\"$0 recover\" to set the last stable configuration"
#    echo "Usage 3: \"$0 uninstall\" to delete all configuration from this repo and restore the original"
    exit 0
}

if [ "$NARGS" -eq 0 ]; then
    print_usage
fi

if [ "$OP" == "install" ]; then
    INSTALLMODE=$2
    if [ "$INSTALLMODE" != "" ]; then
        if [[ "${INSTALL_MODE[@]}" =~ "$INSTALLMODE" ]]; then
            $REPO_UTILS/install_repo_conf.sh $INSTALLMODE
        elif [ "$INSTALLMODE" == "submodules" ];then
            $REPO_UTILS/install_vim_submodules.sh
        fi
    else
        $REPO_UTILS/install_repo_conf.sh
    fi
elif [ "$OP" == "save" ]; then
    #TODO: logic to save
    print_usage
elif [ "$OP" == "recover" ]; then
    print_warning "Recovering configuration:"
    SUBOPTION=$2
    if [ "$SUBOPTION" != "" ]; then
        if [ "$SUBOPTION" == "submodules" ]; then
            print_warning "Recovering only submodules..."
            rm -rf $REPO_PWD/vim/pack
            $REPO_UTILS/install_vim_submodules.sh
        else
            print_warning "Suboptions valid for recover: submodules"
            exit 1
        fi
    else
        $REPO_UTILS/fix_conf.sh
    fi
elif [ "$OP" == "update" ]; then
    UPDATEMODE=$2
    if [ "$UPDATEMODE" != "" ]; then
        if [ "$UPDATEMODE" == "submodules" ]; then
            git submodule update --remote --merge
            git commit
        else
            print_warning "Suboptions valid for update: submodules"
        fi
    else
        print_warning "Suboptions valid for update: submodules"
    fi
else
    print_error "Invalid option: $OP"
    print_usage
fi

exit 0
