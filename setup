#!/bin/bash

source ./utils/print_options.sh

NARGS=$#
OP=$1
REPO_PWD=$(pwd)
REPO_UTILS=$REPO_PWD/utils

function print_usage(){
    print_yellow "Usage: \"$0 install standard\" to install repo configuration standard"
    print_yellow "Usage: \"$0 install vim\" to install only vim configuration"
    print_yellow "Usage: \"$0 update submodules\" to update vim submodules"
#    echo "Usage 2: \"$0 recover\" to recover previous configuration"
#    echo "Usage 3: \"$0 save\" to save actual configuration"
    exit 1
}

if [ "$NARGS" -eq 0 ]; then
    print_usage
else
    if [ "$OP" != "install" ] && [ "$OP" != "recover" ] && [ "$OP" != "save" ] && [ "$OP" != "update" ]; then
        print_red "Invalid option $OP"
        print_usage
    fi
fi

if [ "$OP" == "install" ]; then
    INSTALLMODE=$2
    if [ "$INSTALLMODE" != "" ]; then
        if [ "$INSTALLMODE" == "standard" ]; then
            $REPO_UTILS/install_repo_conf.sh standard
        elif [ "$INSTALLMODE" == "vim" ];then
            $REPO_UTILS/install_repo_conf.sh vim
        elif [ "$INSTALLMODE" == "submodules" ];then
            $REPO_UTILS/install_vim_submodules.sh
        fi
    else
        $REPO_UTILS/install_repo_conf.sh
    fi
elif [ "$OP" == "save" ]; then
    #TODO: logic to save
    print_usage
elif [ "$OP" == "recover" ]; then
    #TODO: logic to recover
    print_usage
elif [ "$OP" == "update" ]; then
    UPDATEMODE=$2
    if [ "$UPDATEMODE" != "" ]; then
        if [ "$UPDATEMODE" == "submodules" ]; then
            git submodule update --remote --merge
            git commit
        else
            print_yellow "Suboptions valid for update: submodules"
        fi
    else
        print_yellow "Suboptions valid for update: submodules"
    fi
fi

exit 1
